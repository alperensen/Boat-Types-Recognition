{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e3e8b06b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import os, shutil\n",
    "import tensorflow as tf\n",
    "import copy\n",
    "from keras import models\n",
    "from keras import layers\n",
    "from keras import optimizers\n",
    "from keras import losses\n",
    "from keras import metrics\n",
    "from keras.utils import to_categorical\n",
    "from keras.preprocessing.image import ImageDataGenerator\n",
    "from keras.preprocessing import image\n",
    "from keras.applications import VGG16\n",
    "from keras import backend as K\n",
    "from keras.applications.vgg16 import preprocess_input, decode_predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "fdfad6c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "original_buoy = \"C:\\DeepLearning\\dataset/buoy\" #Orjinal buoy datasetini içeren klasör dizini\n",
    "original_cruiseship = \"C:\\DeepLearning\\dataset/cruise ship\" #Orjinal cruise ship datasetini içeren klasör dizini\n",
    "original_ferryboat = \"C:\\DeepLearning\\dataset/ferry boat\"   #Orjinal ferry boat datasetini içeren klasör dizini\n",
    "original_freightboat = \"C:\\DeepLearning\\dataset/freight boat\"   #Orjinal freight boat datasetini içeren klasör dizini\n",
    "original_gondola = \"C:\\DeepLearning\\dataset/gondola\"    #Orjinal gondola datasetini içeren klasör dizini\n",
    "original_inflatableboat = \"C:\\DeepLearning\\dataset/inflatable boat\" #Orjinal inflatable boat datasetini içeren klasör dizini\n",
    "original_kayak = \"C:\\DeepLearning\\dataset/kayak\"    #Orjinal kayak datasetini içeren klasör dizini\n",
    "original_paperboat = \"C:\\DeepLearning\\dataset/paper boat\"   #Orjinal paper boat datasetini içeren klasör dizini\n",
    "original_sailboat = \"C:\\DeepLearning\\dataset/sailboat\"  #Orjinal sailboat datasetini içeren klasör dizini\n",
    "\n",
    "base_dir = \"C:\\DeepLearning\\splits\" #Üç bölmeye ayırmak için oluşturacağımız klasör dizini\n",
    "os.mkdir(base_dir) #Train,Validation,Test için klasör oluşturuldu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "80b1812e",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_dir = os.path.join(base_dir, 'train')\n",
    "os.mkdir(train_dir)\n",
    "validation_dir= os.path.join(base_dir, 'validation')\n",
    "os.mkdir(validation_dir)\n",
    "test_dir= os.path.join(base_dir, 'test')\n",
    "os.mkdir(test_dir)\n",
    "\n",
    "#Train dosyaları için datasetteki verilerin oluşturulduğu dosyalar\n",
    "train_buoy = os.path.join(train_dir, 'buoy')\n",
    "os.mkdir(train_buoy)\n",
    "train_cruiseship = os.path.join(train_dir, 'cruise ship')\n",
    "os.mkdir(train_cruiseship)\n",
    "train_ferryboat = os.path.join(train_dir, 'ferry boat')\n",
    "os.mkdir(train_ferryboat)\n",
    "train_freightboat = os.path.join(train_dir, 'freight boat')\n",
    "os.mkdir(train_freightboat)\n",
    "train_gondola = os.path.join(train_dir, 'gondola')\n",
    "os.mkdir(train_gondola)\n",
    "train_inflatableboat = os.path.join(train_dir, 'inflatable boat')\n",
    "os.mkdir(train_inflatableboat)\n",
    "train_kayak = os.path.join(train_dir, 'kayak')\n",
    "os.mkdir(train_kayak)\n",
    "train_paperboat = os.path.join(train_dir, 'paper boat')\n",
    "os.mkdir(train_paperboat)\n",
    "train_sailboat = os.path.join(train_dir, 'sail boat')\n",
    "os.mkdir(train_sailboat)\n",
    "\n",
    "#Validation dosyaları için datasetteki verilerin oluşturulduğu dosyalar\n",
    "val_buoy = os.path.join(validation_dir, 'buoy')\n",
    "os.mkdir(val_buoy)\n",
    "val_cruiseship = os.path.join(validation_dir, 'cruise ship')\n",
    "os.mkdir(val_cruiseship)\n",
    "val_ferryboat = os.path.join(validation_dir, 'ferry boat')\n",
    "os.mkdir(val_ferryboat)\n",
    "val_freightboat = os.path.join(validation_dir, 'freight boat')\n",
    "os.mkdir(val_freightboat)\n",
    "val_gondola = os.path.join(validation_dir, 'gondola')\n",
    "os.mkdir(val_gondola)\n",
    "val_inflatableboat = os.path.join(validation_dir, 'inflatable boat')\n",
    "os.mkdir(val_inflatableboat)\n",
    "val_kayak = os.path.join(validation_dir, 'kayak')\n",
    "os.mkdir(val_kayak)\n",
    "val_paperboat = os.path.join(validation_dir, 'paper boat')\n",
    "os.mkdir(val_paperboat)\n",
    "val_sailboat = os.path.join(validation_dir, 'sail boat')\n",
    "os.mkdir(val_sailboat)\n",
    "\n",
    "#Test dosyaları için datasetteki verilerin oluşturulduğu dosyalar\n",
    "test_buoy = os.path.join(test_dir, 'buoy')\n",
    "os.mkdir(test_buoy)\n",
    "test_cruiseship = os.path.join(test_dir, 'cruise ship')\n",
    "os.mkdir(test_cruiseship)\n",
    "test_ferryboat = os.path.join(test_dir, 'ferry boat')\n",
    "os.mkdir(test_ferryboat)\n",
    "test_freightboat = os.path.join(test_dir, 'freight boat')\n",
    "os.mkdir(test_freightboat)\n",
    "test_gondola = os.path.join(test_dir, 'gondola')\n",
    "os.mkdir(test_gondola)\n",
    "test_inflatableboat = os.path.join(test_dir, 'inflatable boat')\n",
    "os.mkdir(test_inflatableboat)\n",
    "test_kayak = os.path.join(test_dir, 'kayak')\n",
    "os.mkdir(test_kayak)\n",
    "test_paperboat = os.path.join(test_dir, 'paper boat')\n",
    "os.mkdir(test_paperboat)\n",
    "test_sailboat = os.path.join(test_dir, 'sail boat')\n",
    "os.mkdir(test_sailboat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6537de2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "buoy_list = os.listdir(original_buoy)\n",
    "cruiseship_list = os.listdir(original_cruiseship)\n",
    "ferryboat_list = os.listdir(original_ferryboat)\n",
    "freightboat_list = os.listdir(original_freightboat)     #Asıl datasetimin dosyalarını .jpg uzantılı dosyaların isimlerini alabilmek için bir liste içerisine aldım\n",
    "gondola_list = os.listdir(original_gondola)\n",
    "inflatableboat_list = os.listdir(original_inflatableboat)\n",
    "kayak_list = os.listdir(original_kayak)\n",
    "paperboat_list = os.listdir(original_paperboat)\n",
    "sailboat_list = os.listdir(original_sailboat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "97506762",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Dosyaları orjinal buoy dataset içerisinden train,validation,test dosyalarının içerisine kopyaladım\n",
    "fnames = ['{}'.format(i) for i in buoy_list[:30]]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_buoy, fname)\n",
    "    dst = os.path.join(train_buoy, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in buoy_list[30:55]]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_buoy, fname)                                #BUOY\n",
    "    dst = os.path.join(val_buoy, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in buoy_list[55:68]]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_buoy, fname)\n",
    "    dst = os.path.join(test_buoy, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "\n",
    "#Dosyaları orjinal cruise ship dataset içerisinden train,validation,test dosyalarının içerisine kopyaladım\n",
    "fnames = ['{}'.format(i) for i in cruiseship_list[:150]]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_cruiseship, fname)\n",
    "    dst = os.path.join(train_cruiseship, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in cruiseship_list[170:205]]            #CRUISE SHIP\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_cruiseship, fname)\n",
    "    dst = os.path.join(val_cruiseship, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in cruiseship_list[205:239]]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_cruiseship, fname)\n",
    "    dst = os.path.join(test_cruiseship, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "\n",
    "#Dosyaları orjinal ferry boat dataset içerisinden train,validation,test dosyalarının içerisine kopyaladım\n",
    "fnames = ['{}'.format(i) for i in ferryboat_list[:54]]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_ferryboat, fname)\n",
    "    dst = os.path.join(train_ferryboat, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in ferryboat_list[54:70]]          #FERRY BOAT\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_ferryboat, fname)\n",
    "    dst = os.path.join(val_ferryboat, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in ferryboat_list[70:81]]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_ferryboat, fname)\n",
    "    dst = os.path.join(test_ferryboat, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "\n",
    "#Dosyaları orjinal freight boat dataset içerisinden train,validation,test dosyalarının içerisine kopyaladım\n",
    "fnames = ['{}'.format(i) for i in freightboat_list[:20]]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_freightboat, fname)\n",
    "    dst = os.path.join(train_freightboat, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in freightboat_list[20:25]]                #FREIGHT BOAT\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_freightboat, fname)\n",
    "    dst = os.path.join(val_freightboat, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in freightboat_list[25:29]]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_freightboat, fname)\n",
    "    dst = os.path.join(test_freightboat, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "\n",
    "#Dosyaları orjinal gondola dataset içerisinden train,validation,test dosyalarının içerisine kopyaladım\n",
    "fnames = ['{}'.format(i) for i in gondola_list[:160]]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_gondola, fname)\n",
    "    dst = os.path.join(train_gondola, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in gondola_list[160:200]]           #GONDOLA\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_gondola, fname)\n",
    "    dst = os.path.join(val_gondola, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in gondola_list[200:242]]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_gondola, fname)\n",
    "    dst = os.path.join(test_gondola, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "\n",
    "#Dosyaları orjinal inflatable boat dataset içerisinden train,validation,test dosyalarının içerisine kopyaladım\n",
    "fnames = ['{}'.format(i) for i in inflatableboat_list[:14]]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_inflatableboat, fname)\n",
    "    dst = os.path.join(train_inflatableboat, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in inflatableboat_list[14:18]]          #INFLATABLE BOAT\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_inflatableboat, fname)\n",
    "    dst = os.path.join(val_inflatableboat, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in inflatableboat_list[18:21]]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_inflatableboat, fname)\n",
    "    dst = os.path.join(test_inflatableboat, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "\n",
    "#Dosyaları orjinal kayak dataset içerisinden train,validation,test dosyalarının içerisine kopyaladım\n",
    "fnames = ['{}'.format(i) for i in kayak_list[:155]]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_kayak, fname)\n",
    "    dst = os.path.join(train_kayak, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in kayak_list[155:205]]                     #KAYAK\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_kayak, fname)\n",
    "    dst = os.path.join(val_kayak, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in kayak_list[205:254]]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_kayak, fname)\n",
    "    dst = os.path.join(test_kayak, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "\n",
    "#Dosyaları orjinal paper boat dataset içerisinden train,validation,test dosyalarının içerisine kopyaladım\n",
    "fnames = ['{}'.format(i) for i in paperboat_list[:24]]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_paperboat, fname)\n",
    "    dst = os.path.join(train_paperboat, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in paperboat_list[24:32]]                  #PAPER BOAT\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_paperboat, fname)\n",
    "    dst = os.path.join(val_paperboat, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in paperboat_list[32:40]]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_paperboat, fname)\n",
    "    dst = os.path.join(test_paperboat, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "\n",
    "#Dosyaları orjinal sail boat dataset içerisinden train,validation,test dosyalarının içerisine kopyaladım\n",
    "fnames = ['{}'.format(i) for i in sailboat_list[:293]]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_sailboat, fname)\n",
    "    dst = os.path.join(train_sailboat, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in sailboat_list[293:390]]                 #SAIL BOAT\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_sailboat, fname)\n",
    "    dst = os.path.join(val_sailboat, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in sailboat_list[390:488]]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_sailboat, fname)\n",
    "    dst = os.path.join(test_sailboat, fname)\n",
    "    shutil.copyfile(src, dst)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "2aa7e4cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Oluşturulan Model\n",
    "\n",
    "model = models.Sequential()\n",
    "model.add(layers.Conv2D(32, (3, 3), activation='relu',\n",
    "                        input_shape=(150, 150, 3)))\n",
    "model.add(layers.MaxPooling2D((2, 2)))\n",
    "model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n",
    "model.add(layers.MaxPooling2D((2,2)))\n",
    "model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
    "model.add(layers.MaxPooling2D((2,2)))\n",
    "model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
    "model.add(layers.MaxPooling2D((2,2)))\n",
    "model.add(layers.Flatten())\n",
    "model.add(layers.Dense(512, activation='relu'))\n",
    "model.add(layers.Dense(9, activation='softmax'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "effac960",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv2d (Conv2D)             (None, 148, 148, 32)      896       \n",
      "                                                                 \n",
      " max_pooling2d (MaxPooling2D  (None, 74, 74, 32)       0         \n",
      " )                                                               \n",
      "                                                                 \n",
      " conv2d_1 (Conv2D)           (None, 72, 72, 64)        18496     \n",
      "                                                                 \n",
      " max_pooling2d_1 (MaxPooling  (None, 36, 36, 64)       0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " conv2d_2 (Conv2D)           (None, 34, 34, 128)       73856     \n",
      "                                                                 \n",
      " max_pooling2d_2 (MaxPooling  (None, 17, 17, 128)      0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " conv2d_3 (Conv2D)           (None, 15, 15, 128)       147584    \n",
      "                                                                 \n",
      " max_pooling2d_3 (MaxPooling  (None, 7, 7, 128)        0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " flatten (Flatten)           (None, 6272)              0         \n",
      "                                                                 \n",
      " dense (Dense)               (None, 512)               3211776   \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 9)                 4617      \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 3,457,225\n",
      "Trainable params: 3,457,225\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()  #Modelimizin özeti"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ed2bd3cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Modelimizi derliyoruz\n",
    "model.compile(loss='categorical_crossentropy',\n",
    "              optimizer=optimizers.Adam(learning_rate=0.001),\n",
    "              metrics=['acc'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "258186e5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 900 images belonging to 9 classes.\n",
      "Found 280 images belonging to 9 classes.\n"
     ]
    }
   ],
   "source": [
    "#ImageDataGenerator sınıfı ile normalizasyon işlemini gerçekleştiriyorum\n",
    "train_data_gen = ImageDataGenerator(rescale=1./255)\n",
    "test_data_gen = ImageDataGenerator(rescale=1./255)\n",
    "\n",
    "train_generator = train_data_gen.flow_from_directory(\n",
    "    train_dir,\n",
    "    target_size=(150, 150),\n",
    "    batch_size=20,\n",
    "    class_mode='categorical')\n",
    "\n",
    "val_generator = test_data_gen.flow_from_directory(\n",
    "    validation_dir,\n",
    "    target_size=(150, 150),\n",
    "    batch_size=20,\n",
    "    class_mode='categorical')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f8f350a6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data batch shape: (20, 150, 150, 3)\n",
      "labels batch shape: (20, 9)\n",
      "data batch shape: (20, 150, 150, 3)\n",
      "labels batch shape: (20, 9)\n"
     ]
    }
   ],
   "source": [
    "#Batch Shape\n",
    "for data_batch, labels_batch in train_generator:\n",
    "    print('data batch shape:', data_batch.shape)\n",
    "    print('labels batch shape:', labels_batch.shape)\n",
    "    break\n",
    "for data_batch, labels_batch in val_generator:\n",
    "    print('data batch shape:', data_batch.shape)\n",
    "    print('labels batch shape:', labels_batch.shape)\n",
    "    break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "b23ac30f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\ALPEREN\\AppData\\Local\\Temp\\ipykernel_19436\\248505733.py:2: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n",
      "  history = model.fit_generator(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "20/20 [==============================] - 13s 633ms/step - loss: 1.9360 - acc: 0.2950 - val_loss: 1.9114 - val_acc: 0.2950\n",
      "Epoch 2/20\n",
      "20/20 [==============================] - 11s 546ms/step - loss: 1.7719 - acc: 0.3625 - val_loss: 1.7852 - val_acc: 0.3700\n",
      "Epoch 3/20\n",
      "20/20 [==============================] - 10s 527ms/step - loss: 1.7056 - acc: 0.3725 - val_loss: 1.7444 - val_acc: 0.3750\n",
      "Epoch 4/20\n",
      "20/20 [==============================] - 10s 509ms/step - loss: 1.5688 - acc: 0.4275 - val_loss: 1.7829 - val_acc: 0.4400\n",
      "Epoch 5/20\n",
      "20/20 [==============================] - 10s 487ms/step - loss: 1.5526 - acc: 0.4925 - val_loss: 1.6115 - val_acc: 0.4600\n",
      "Epoch 6/20\n",
      "20/20 [==============================] - 10s 498ms/step - loss: 1.5155 - acc: 0.4775 - val_loss: 1.6531 - val_acc: 0.4700\n",
      "Epoch 7/20\n",
      "20/20 [==============================] - 10s 485ms/step - loss: 1.5122 - acc: 0.4725 - val_loss: 1.6588 - val_acc: 0.4450\n",
      "Epoch 8/20\n",
      "20/20 [==============================] - 10s 501ms/step - loss: 1.3796 - acc: 0.5625 - val_loss: 1.5413 - val_acc: 0.4800\n",
      "Epoch 9/20\n",
      "20/20 [==============================] - 10s 500ms/step - loss: 1.3747 - acc: 0.5500 - val_loss: 1.6924 - val_acc: 0.4500\n",
      "Epoch 10/20\n",
      "20/20 [==============================] - 10s 496ms/step - loss: 1.2979 - acc: 0.5350 - val_loss: 1.5658 - val_acc: 0.5200\n",
      "Epoch 11/20\n",
      "20/20 [==============================] - 10s 486ms/step - loss: 1.2637 - acc: 0.5775 - val_loss: 1.3806 - val_acc: 0.5550\n",
      "Epoch 12/20\n",
      "20/20 [==============================] - 10s 481ms/step - loss: 1.0903 - acc: 0.6625 - val_loss: 1.7148 - val_acc: 0.4450\n",
      "Epoch 13/20\n",
      "20/20 [==============================] - 10s 477ms/step - loss: 1.0141 - acc: 0.6600 - val_loss: 1.6477 - val_acc: 0.5300\n",
      "Epoch 14/20\n",
      "20/20 [==============================] - 10s 481ms/step - loss: 0.9275 - acc: 0.7025 - val_loss: 1.4841 - val_acc: 0.4550\n",
      "Epoch 15/20\n",
      "20/20 [==============================] - 10s 484ms/step - loss: 0.8386 - acc: 0.7450 - val_loss: 1.8523 - val_acc: 0.4900\n",
      "Epoch 16/20\n",
      "20/20 [==============================] - 10s 484ms/step - loss: 0.7309 - acc: 0.7525 - val_loss: 1.9260 - val_acc: 0.4050\n",
      "Epoch 17/20\n",
      "20/20 [==============================] - 10s 484ms/step - loss: 0.6911 - acc: 0.7575 - val_loss: 1.8256 - val_acc: 0.4750\n",
      "Epoch 18/20\n",
      "20/20 [==============================] - 10s 483ms/step - loss: 0.5860 - acc: 0.8000 - val_loss: 2.1150 - val_acc: 0.4950\n",
      "Epoch 19/20\n",
      "20/20 [==============================] - 10s 481ms/step - loss: 0.4777 - acc: 0.8300 - val_loss: 1.9710 - val_acc: 0.5150\n",
      "Epoch 20/20\n",
      "20/20 [==============================] - 10s 488ms/step - loss: 0.3954 - acc: 0.8775 - val_loss: 2.7877 - val_acc: 0.4650\n"
     ]
    }
   ],
   "source": [
    "#Modelimizin eğitimini gerçekleştiriyoruz\n",
    "history = model.fit_generator(\n",
    "    train_generator,\n",
    "    steps_per_epoch=20,\n",
    "    epochs=20,\n",
    "    validation_data=val_generator,\n",
    "    validation_steps=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "7d818659",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:absl:Found untraced functions such as _jit_compiled_convolution_op, _jit_compiled_convolution_op, _jit_compiled_convolution_op, _jit_compiled_convolution_op while saving (showing 4 of 4). These functions will not be directly callable after loading.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Assets written to: C:/DeepLearning/boats\\assets\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Assets written to: C:/DeepLearning/boats\\assets\n"
     ]
    }
   ],
   "source": [
    "#Modelimin sonradan tekrardan kullanılabilmesi için kaydediyorum\n",
    "model.save('C:/DeepLearning/boats')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "288733df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Training acc,Validation acc, Training loss, Validation loss çizdirmek için\n",
    "\n",
    "acc = history.history['acc']\n",
    "val_acc = history.history['val_acc']\n",
    "loss = history.history['loss']\n",
    "val_loss = history.history['val_loss']\n",
    "\n",
    "epochs = range(1, len(acc) + 1)\n",
    "\n",
    "plt.plot(epochs, acc, 'bo', label='Training acc')\n",
    "plt.plot(epochs, val_acc, 'b', label='Validation acc')\n",
    "plt.title('Training and validation accuracy')\n",
    "plt.legend()\n",
    "\n",
    "plt.figure()\n",
    "\n",
    "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
    "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
    "plt.title('Training and validation loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "5a971200",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Train ve Validation verilerini birleştirebilmek için yeniden dosya dizinleri oluşturuyorum ve\n",
    "# verilerimi bunların içerisinde topluyorum.\n",
    "train_val_dir = r\"C:\\DeepLearning\\splits\\train_val_total\"\n",
    "os.mkdir(train_val_dir)\n",
    "\n",
    "train_val_buoy = os.path.join(train_val_dir, \"train_val_buoy\")\n",
    "os.mkdir(train_val_buoy)\n",
    "train_val_cruiseship = os.path.join(train_val_dir, \"train_val_cruiseship\")\n",
    "os.mkdir(train_val_cruiseship)\n",
    "train_val_ferryboat = os.path.join(train_val_dir, \"train_val_ferryboat\")\n",
    "os.mkdir(train_val_ferryboat)\n",
    "train_val_freightboat = os.path.join(train_val_dir, \"train_val_freightboat\")\n",
    "os.mkdir(train_val_freightboat)\n",
    "train_val_gondola = os.path.join(train_val_dir, \"train_val_gondola\")\n",
    "os.mkdir(train_val_gondola)\n",
    "train_val_inflatableboat = os.path.join(train_val_dir, \"train_val_inflatableboat\")\n",
    "os.mkdir(train_val_inflatableboat)\n",
    "train_val_kayak = os.path.join(train_val_dir, \"train_val_kayak\")\n",
    "os.mkdir(train_val_kayak)\n",
    "train_val_paperboat = os.path.join(train_val_dir, \"train_val_paperboat\")\n",
    "os.mkdir(train_val_paperboat)\n",
    "train_val_sailboat = os.path.join(train_val_dir, \"train_val_sailboat\")\n",
    "os.mkdir(train_val_sailboat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "06edb02c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#Train verilerini yeni oluşturduğum train_val_total dosyasına kopyalıyorum\n",
    "\n",
    "fnames = ['{}'.format(i) for i in os.listdir(train_buoy)]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(train_buoy, fname)\n",
    "    dst = os.path.join(train_val_buoy, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in os.listdir(train_cruiseship)]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(train_cruiseship, fname)                                \n",
    "    dst = os.path.join(train_val_cruiseship, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in os.listdir(train_ferryboat)]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(train_ferryboat, fname)\n",
    "    dst = os.path.join(train_val_ferryboat, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in os.listdir(train_freightboat)]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(train_freightboat, fname)\n",
    "    dst = os.path.join(train_val_freightboat, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in os.listdir(train_gondola)]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(train_gondola, fname)\n",
    "    dst = os.path.join(train_val_gondola, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in os.listdir(train_inflatableboat)]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(train_inflatableboat, fname)\n",
    "    dst = os.path.join(train_val_inflatableboat, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in os.listdir(train_kayak)]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(train_kayak, fname)\n",
    "    dst = os.path.join(train_val_kayak, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in os.listdir(train_paperboat)]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(train_paperboat, fname)\n",
    "    dst = os.path.join(train_val_paperboat, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in os.listdir(train_sailboat)]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(train_sailboat, fname)\n",
    "    dst = os.path.join(train_val_sailboat, fname)\n",
    "    shutil.copyfile(src, dst)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "745efc5a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Validation değerlerini oluşturduğum yeni train_val_total klasörüne kopyalıyorum\n",
    "\n",
    "fnames = ['{}'.format(i) for i in os.listdir(val_buoy)]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(val_buoy, fname)\n",
    "    dst = os.path.join(train_val_buoy, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in os.listdir(val_cruiseship)]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(val_cruiseship, fname)                                \n",
    "    dst = os.path.join(train_val_cruiseship, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in os.listdir(val_ferryboat)]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(val_ferryboat, fname)\n",
    "    dst = os.path.join(train_val_ferryboat, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in os.listdir(val_freightboat)]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(val_freightboat, fname)\n",
    "    dst = os.path.join(train_val_freightboat, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in os.listdir(val_gondola)]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(val_gondola, fname)\n",
    "    dst = os.path.join(train_val_gondola, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in os.listdir(val_inflatableboat)]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(val_inflatableboat, fname)\n",
    "    dst = os.path.join(train_val_inflatableboat, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in os.listdir(val_kayak)]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(val_kayak, fname)\n",
    "    dst = os.path.join(train_val_kayak, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in os.listdir(val_paperboat)]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(val_paperboat, fname)\n",
    "    dst = os.path.join(train_val_paperboat, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "fnames = ['{}'.format(i) for i in os.listdir(val_sailboat)]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(val_sailboat, fname)\n",
    "    dst = os.path.join(train_val_sailboat, fname)\n",
    "    shutil.copyfile(src, dst)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "12d4ca43",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 1180 images belonging to 9 classes.\n"
     ]
    }
   ],
   "source": [
    "#Tekrardan verileri generatorden geçiriyorum\n",
    "train_datagen = ImageDataGenerator(rescale=1./255)\n",
    "train_val_generator = train_datagen.flow_from_directory(\n",
    "        train_val_dir,\n",
    "        target_size=(150,150),\n",
    "        batch_size=20,\n",
    "        class_mode='categorical')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "68f46a78",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Modelimizi derliyoruz\n",
    "model.compile(loss='categorical_crossentropy',\n",
    "              optimizer=optimizers.Adam(learning_rate=0.001),\n",
    "              metrics=['acc'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "d6274732",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/25\n",
      "20/20 [==============================] - 7s 356ms/step - loss: 0.3378 - acc: 0.8975\n",
      "Epoch 2/25\n",
      "20/20 [==============================] - 7s 343ms/step - loss: 0.3337 - acc: 0.8775\n",
      "Epoch 3/25\n",
      "20/20 [==============================] - 7s 353ms/step - loss: 0.2898 - acc: 0.9050\n",
      "Epoch 4/25\n",
      "20/20 [==============================] - 7s 352ms/step - loss: 0.1900 - acc: 0.9375\n",
      "Epoch 5/25\n",
      "20/20 [==============================] - 8s 379ms/step - loss: 0.2176 - acc: 0.9175\n",
      "Epoch 6/25\n",
      "20/20 [==============================] - 8s 379ms/step - loss: 0.1804 - acc: 0.9400\n",
      "Epoch 7/25\n",
      "20/20 [==============================] - 8s 378ms/step - loss: 0.1578 - acc: 0.9575\n",
      "Epoch 8/25\n",
      "20/20 [==============================] - 8s 379ms/step - loss: 0.1851 - acc: 0.9325\n",
      "Epoch 9/25\n",
      "20/20 [==============================] - 8s 382ms/step - loss: 0.1811 - acc: 0.9300\n",
      "Epoch 10/25\n",
      "20/20 [==============================] - 8s 386ms/step - loss: 0.2337 - acc: 0.9350\n",
      "Epoch 11/25\n",
      "20/20 [==============================] - 8s 386ms/step - loss: 0.1846 - acc: 0.9400\n",
      "Epoch 12/25\n",
      "20/20 [==============================] - 8s 387ms/step - loss: 0.1165 - acc: 0.9575\n",
      "Epoch 13/25\n",
      "20/20 [==============================] - 8s 387ms/step - loss: 0.1080 - acc: 0.9575\n",
      "Epoch 14/25\n",
      "20/20 [==============================] - 8s 391ms/step - loss: 0.0660 - acc: 0.9850\n",
      "Epoch 15/25\n",
      "20/20 [==============================] - 8s 391ms/step - loss: 0.0896 - acc: 0.9725\n",
      "Epoch 16/25\n",
      "20/20 [==============================] - 8s 398ms/step - loss: 0.0443 - acc: 0.9875\n",
      "Epoch 17/25\n",
      "20/20 [==============================] - 8s 396ms/step - loss: 0.0387 - acc: 0.9925\n",
      "Epoch 18/25\n",
      "20/20 [==============================] - 8s 394ms/step - loss: 0.0850 - acc: 0.9800\n",
      "Epoch 19/25\n",
      "20/20 [==============================] - 8s 395ms/step - loss: 0.0284 - acc: 0.9850\n",
      "Epoch 20/25\n",
      "20/20 [==============================] - 8s 409ms/step - loss: 0.0131 - acc: 0.9975\n",
      "Epoch 21/25\n",
      "20/20 [==============================] - 8s 386ms/step - loss: 0.0186 - acc: 0.9925\n",
      "Epoch 22/25\n",
      "20/20 [==============================] - 8s 393ms/step - loss: 0.0156 - acc: 0.9950\n",
      "Epoch 23/25\n",
      "20/20 [==============================] - 8s 371ms/step - loss: 0.0202 - acc: 0.9950\n",
      "Epoch 24/25\n",
      "20/20 [==============================] - 8s 397ms/step - loss: 0.0202 - acc: 0.9975\n",
      "Epoch 25/25\n",
      "20/20 [==============================] - 8s 374ms/step - loss: 0.0265 - acc: 0.9925\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(\n",
    "    train_val_generator,\n",
    "    steps_per_epoch=20,\n",
    "    epochs=25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "6168b93e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 262 images belonging to 9 classes.\n"
     ]
    }
   ],
   "source": [
    "#Test verilerini generatör işleminden geçiriyorum\n",
    "test_datagen = ImageDataGenerator(rescale=1./255)\n",
    "test_generator = test_datagen.flow_from_directory(\n",
    "        test_dir,\n",
    "        target_size=(150,150),\n",
    "        batch_size=20,\n",
    "        class_mode='categorical')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "8e106dea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14/14 [==============================] - 5s 327ms/step - loss: 3.8677 - acc: 0.5153\n",
      "0.5152671933174133\n"
     ]
    }
   ],
   "source": [
    "#Test verilerinin performansını deniyorum\n",
    "test_loss,test_acc=model.evaluate(test_generator)\n",
    "print(test_acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "d84b5af1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Overfitting gidermek için modelime DropOut ekliyorum\n",
    "\n",
    "model = models.Sequential()\n",
    "model.add(layers.Conv2D(32, (3, 3), activation='relu',\n",
    "                        input_shape=(150, 150, 3)))\n",
    "model.add(layers.MaxPooling2D((2, 2)))\n",
    "model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n",
    "model.add(layers.MaxPooling2D((2,2)))\n",
    "model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
    "model.add(layers.MaxPooling2D((2,2)))\n",
    "model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
    "model.add(layers.MaxPooling2D((2,2)))\n",
    "model.add(layers.Flatten())\n",
    "model.add(layers.Dropout(0.5))\n",
    "model.add(layers.Dense(512, activation='relu'))\n",
    "model.add(layers.Dense(9, activation='softmax'))\n",
    "\n",
    "model.compile(loss='categorical_crossentropy',\n",
    "              optimizer=optimizers.Adam(learning_rate=0.001),\n",
    "              metrics=['acc'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "6c3c972c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 900 images belonging to 9 classes.\n",
      "Found 280 images belonging to 9 classes.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\ALPEREN\\AppData\\Local\\Temp\\ipykernel_19436\\2751355377.py:19: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n",
      "  history = model.fit_generator(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "20/20 [==============================] - 11s 551ms/step - loss: 0.8521 - acc: 0.7025 - val_loss: 2.1464 - val_acc: 0.4400\n",
      "Epoch 2/50\n",
      "20/20 [==============================] - 12s 602ms/step - loss: 1.0170 - acc: 0.6700 - val_loss: 1.9546 - val_acc: 0.4600\n",
      "Epoch 3/50\n",
      "20/20 [==============================] - 11s 563ms/step - loss: 0.8990 - acc: 0.6825 - val_loss: 2.4771 - val_acc: 0.4300\n",
      "Epoch 4/50\n",
      "20/20 [==============================] - 11s 566ms/step - loss: 0.8780 - acc: 0.7100 - val_loss: 2.3588 - val_acc: 0.4450\n",
      "Epoch 5/50\n",
      "20/20 [==============================] - 12s 577ms/step - loss: 0.8886 - acc: 0.7325 - val_loss: 2.2093 - val_acc: 0.4150\n",
      "Epoch 6/50\n",
      "20/20 [==============================] - 11s 554ms/step - loss: 0.8152 - acc: 0.7200 - val_loss: 2.2539 - val_acc: 0.3600\n",
      "Epoch 7/50\n",
      "20/20 [==============================] - 10s 506ms/step - loss: 0.6955 - acc: 0.7725 - val_loss: 2.5376 - val_acc: 0.4100\n",
      "Epoch 8/50\n",
      "20/20 [==============================] - 10s 483ms/step - loss: 0.7295 - acc: 0.7675 - val_loss: 2.2718 - val_acc: 0.4200\n",
      "Epoch 9/50\n",
      "20/20 [==============================] - 10s 510ms/step - loss: 0.7047 - acc: 0.7525 - val_loss: 2.2792 - val_acc: 0.3600\n",
      "Epoch 10/50\n",
      "20/20 [==============================] - 11s 542ms/step - loss: 0.5605 - acc: 0.7950 - val_loss: 2.1019 - val_acc: 0.4700\n",
      "Epoch 11/50\n",
      "20/20 [==============================] - 10s 515ms/step - loss: 0.6549 - acc: 0.8000 - val_loss: 2.1326 - val_acc: 0.4800\n",
      "Epoch 12/50\n",
      "20/20 [==============================] - 12s 611ms/step - loss: 0.4796 - acc: 0.8325 - val_loss: 2.2795 - val_acc: 0.4250\n",
      "Epoch 13/50\n",
      "20/20 [==============================] - 10s 505ms/step - loss: 0.4676 - acc: 0.8150 - val_loss: 2.3311 - val_acc: 0.4050\n",
      "Epoch 14/50\n",
      "20/20 [==============================] - 11s 545ms/step - loss: 0.4342 - acc: 0.8400 - val_loss: 2.2342 - val_acc: 0.4800\n",
      "Epoch 15/50\n",
      "20/20 [==============================] - 12s 583ms/step - loss: 0.3068 - acc: 0.8975 - val_loss: 2.7081 - val_acc: 0.4200\n",
      "Epoch 16/50\n",
      "20/20 [==============================] - 12s 578ms/step - loss: 0.3481 - acc: 0.8825 - val_loss: 2.6054 - val_acc: 0.4650\n",
      "Epoch 17/50\n",
      "20/20 [==============================] - 11s 560ms/step - loss: 0.3100 - acc: 0.9025 - val_loss: 3.1853 - val_acc: 0.3950\n",
      "Epoch 18/50\n",
      "20/20 [==============================] - 10s 491ms/step - loss: 0.3100 - acc: 0.9050 - val_loss: 3.3324 - val_acc: 0.3850\n",
      "Epoch 19/50\n",
      "20/20 [==============================] - 10s 489ms/step - loss: 0.2188 - acc: 0.9275 - val_loss: 3.2556 - val_acc: 0.4900\n",
      "Epoch 20/50\n",
      "20/20 [==============================] - 11s 570ms/step - loss: 0.2136 - acc: 0.9325 - val_loss: 3.3800 - val_acc: 0.4850\n",
      "Epoch 21/50\n",
      "20/20 [==============================] - 11s 571ms/step - loss: 0.2764 - acc: 0.9050 - val_loss: 2.7513 - val_acc: 0.4500\n",
      "Epoch 22/50\n",
      "20/20 [==============================] - 11s 565ms/step - loss: 0.3998 - acc: 0.9000 - val_loss: 3.9510 - val_acc: 0.3700\n",
      "Epoch 23/50\n",
      "20/20 [==============================] - 10s 486ms/step - loss: 0.2266 - acc: 0.9200 - val_loss: 3.0109 - val_acc: 0.4100\n",
      "Epoch 24/50\n",
      "20/20 [==============================] - 10s 517ms/step - loss: 0.1865 - acc: 0.9275 - val_loss: 3.0035 - val_acc: 0.4550\n",
      "Epoch 25/50\n",
      "20/20 [==============================] - 11s 573ms/step - loss: 0.2372 - acc: 0.9300 - val_loss: 2.8890 - val_acc: 0.4450\n",
      "Epoch 26/50\n",
      "20/20 [==============================] - 11s 558ms/step - loss: 0.1602 - acc: 0.9550 - val_loss: 3.6908 - val_acc: 0.4150\n",
      "Epoch 27/50\n",
      "20/20 [==============================] - 10s 522ms/step - loss: 0.2114 - acc: 0.9300 - val_loss: 3.5974 - val_acc: 0.4050\n",
      "Epoch 28/50\n",
      "20/20 [==============================] - 10s 481ms/step - loss: 0.1632 - acc: 0.9475 - val_loss: 3.7619 - val_acc: 0.5000\n",
      "Epoch 29/50\n",
      "20/20 [==============================] - 10s 483ms/step - loss: 0.1653 - acc: 0.9375 - val_loss: 3.4029 - val_acc: 0.4500\n",
      "Epoch 30/50\n",
      "20/20 [==============================] - 10s 487ms/step - loss: 0.0729 - acc: 0.9800 - val_loss: 3.8353 - val_acc: 0.4450\n",
      "Epoch 31/50\n",
      "20/20 [==============================] - 9s 475ms/step - loss: 0.1580 - acc: 0.9500 - val_loss: 3.5613 - val_acc: 0.4250\n",
      "Epoch 32/50\n",
      "20/20 [==============================] - 10s 478ms/step - loss: 0.1443 - acc: 0.9550 - val_loss: 4.0346 - val_acc: 0.4550\n",
      "Epoch 33/50\n",
      "20/20 [==============================] - 10s 480ms/step - loss: 0.1053 - acc: 0.9725 - val_loss: 3.9897 - val_acc: 0.4600\n",
      "Epoch 34/50\n",
      "20/20 [==============================] - 9s 471ms/step - loss: 0.1264 - acc: 0.9600 - val_loss: 3.6104 - val_acc: 0.4650\n",
      "Epoch 35/50\n",
      "20/20 [==============================] - 9s 473ms/step - loss: 0.0988 - acc: 0.9725 - val_loss: 3.9421 - val_acc: 0.4800\n",
      "Epoch 36/50\n",
      "20/20 [==============================] - 9s 473ms/step - loss: 0.1073 - acc: 0.9575 - val_loss: 3.7915 - val_acc: 0.5050\n",
      "Epoch 37/50\n",
      "20/20 [==============================] - 9s 476ms/step - loss: 0.0892 - acc: 0.9675 - val_loss: 3.5234 - val_acc: 0.4900\n",
      "Epoch 38/50\n",
      "20/20 [==============================] - 10s 478ms/step - loss: 0.0489 - acc: 0.9850 - val_loss: 4.1216 - val_acc: 0.4700\n",
      "Epoch 39/50\n",
      "20/20 [==============================] - 10s 506ms/step - loss: 0.0509 - acc: 0.9850 - val_loss: 4.0411 - val_acc: 0.5050\n",
      "Epoch 40/50\n",
      "20/20 [==============================] - 12s 625ms/step - loss: 0.0690 - acc: 0.9850 - val_loss: 4.3123 - val_acc: 0.4300\n",
      "Epoch 41/50\n",
      "20/20 [==============================] - 12s 592ms/step - loss: 0.0798 - acc: 0.9800 - val_loss: 3.7529 - val_acc: 0.4700\n",
      "Epoch 42/50\n",
      "20/20 [==============================] - 12s 582ms/step - loss: 0.0596 - acc: 0.9825 - val_loss: 4.2557 - val_acc: 0.5150\n",
      "Epoch 43/50\n",
      "20/20 [==============================] - 11s 544ms/step - loss: 0.0623 - acc: 0.9850 - val_loss: 5.0012 - val_acc: 0.4650\n",
      "Epoch 44/50\n",
      "20/20 [==============================] - 11s 546ms/step - loss: 0.0478 - acc: 0.9825 - val_loss: 4.0825 - val_acc: 0.4750\n",
      "Epoch 45/50\n",
      "20/20 [==============================] - 10s 509ms/step - loss: 0.0382 - acc: 0.9925 - val_loss: 3.9686 - val_acc: 0.4700\n",
      "Epoch 46/50\n",
      "20/20 [==============================] - 11s 549ms/step - loss: 0.1665 - acc: 0.9650 - val_loss: 4.0580 - val_acc: 0.5050\n",
      "Epoch 47/50\n",
      "20/20 [==============================] - 10s 497ms/step - loss: 0.0547 - acc: 0.9800 - val_loss: 3.3547 - val_acc: 0.4900\n",
      "Epoch 48/50\n",
      "20/20 [==============================] - 10s 477ms/step - loss: 0.1603 - acc: 0.9600 - val_loss: 4.8822 - val_acc: 0.4150\n",
      "Epoch 49/50\n",
      "20/20 [==============================] - 10s 487ms/step - loss: 0.0898 - acc: 0.9750 - val_loss: 4.5552 - val_acc: 0.4950\n",
      "Epoch 50/50\n",
      "20/20 [==============================] - 11s 549ms/step - loss: 0.1118 - acc: 0.9675 - val_loss: 4.3801 - val_acc: 0.4450\n"
     ]
    }
   ],
   "source": [
    "#Overfitting gidermek için augmentation işlemi uyguluyorum\n",
    "#Augmentation işlemi\n",
    "\n",
    "train_datagen = ImageDataGenerator(1./255)\n",
    "test_datagen = ImageDataGenerator(1./255)\n",
    "\n",
    "trains_generator = train_datagen.flow_from_directory(\n",
    "    train_dir,\n",
    "    target_size=(150, 150),\n",
    "    batch_size=20,\n",
    "    class_mode='categorical'\n",
    ")\n",
    "validation_generator = test_datagen.flow_from_directory(\n",
    "    validation_dir,\n",
    "    target_size=(150, 150),\n",
    "    batch_size=20,\n",
    "    class_mode='categorical'\n",
    ")\n",
    "history = model.fit_generator(\n",
    "    trains_generator,\n",
    "    steps_per_epoch=20,\n",
    "    epochs=50,\n",
    "    validation_data=validation_generator,\n",
    "    validation_steps=10)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "f05012d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "acc = history.history['acc']\n",
    "val_acc = history.history['val_acc']\n",
    "loss = history.history['loss']\n",
    "val_loss = history.history['val_loss']\n",
    "\n",
    "epochs = range(1, len(acc) + 1)\n",
    "\n",
    "plt.plot(epochs, acc, 'bo', label='Training acc')\n",
    "plt.plot(epochs, val_acc, 'b', label='Validation acc')\n",
    "plt.title('Training and validation accuracy')\n",
    "plt.legend()\n",
    "\n",
    "plt.figure()\n",
    "\n",
    "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
    "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
    "plt.title('Training and validation loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "2c08455e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:absl:Found untraced functions such as _jit_compiled_convolution_op, _jit_compiled_convolution_op, _jit_compiled_convolution_op, _jit_compiled_convolution_op while saving (showing 4 of 4). These functions will not be directly callable after loading.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Assets written to: C:/DeepLearning/overfitting_boats\\assets\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Assets written to: C:/DeepLearning/overfitting_boats\\assets\n"
     ]
    }
   ],
   "source": [
    "#Modelimi kaydediyorum\n",
    "model.save('C:/DeepLearning/overfitting_boats')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "e7a990a3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 262 images belonging to 9 classes.\n",
      "10/10 [==============================] - 3s 256ms/step - loss: 1.9718 - acc: 0.3550\n",
      "0.35499998927116394\n"
     ]
    }
   ],
   "source": [
    "test_datagen = ImageDataGenerator(rescale=1./255)\n",
    "test_generator = test_datagen.flow_from_directory(\n",
    "        test_dir,\n",
    "        target_size=(150,150),\n",
    "        batch_size=20,\n",
    "        class_mode='categorical')\n",
    "#Test verilerinin performansını deniyorum\n",
    "test_loss,test_acc=model.evaluate(test_generator, steps=10)\n",
    "print(test_acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "b3f1a081",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "#VGG16\n",
    "from keras.applications import VGG16\n",
    "conv_base = VGG16(weights='imagenet',                       #Modeli imagenet üzerinde başlatıyorum       \n",
    "                 include_top=False,\n",
    "                 input_shape=(150, 150, 3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "cdda5dbd",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import os\n",
    "from keras.preprocessing.image import ImageDataGenerator\n",
    "\n",
    "datagen = ImageDataGenerator(rescale=1./255)\n",
    "\n",
    "\n",
    "def extract_features(directory, sample_count):\n",
    "    features = np.zeros(shape=(sample_count, 4, 4, 512))\n",
    "    labels = np.zeros(shape=(sample_count,9))\n",
    "    \n",
    "    generator = datagen.flow_from_directory(\n",
    "        directory,\n",
    "        target_size=(150, 150),\n",
    "        batch_size=20,\n",
    "        class_mode='categorical')\n",
    "    i=0\n",
    "    for inputs_batch, labels_batch in generator:\n",
    "        features_batch = conv_base.predict(inputs_batch)\n",
    "        features[i * 20 : (i + 1) * 20] = features_batch\n",
    "        labels[i * 20 : (i + 1) * 20] = labels_batch\n",
    "        i += 1\n",
    "        if i * 20 >= sample_count:\n",
    "            break\n",
    "    return features, labels\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "1aabcf4a",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 900 images belonging to 9 classes.\n",
      "1/1 [==============================] - 1s 727ms/step\n",
      "1/1 [==============================] - 1s 587ms/step\n",
      "1/1 [==============================] - 1s 596ms/step\n",
      "1/1 [==============================] - 1s 593ms/step\n",
      "1/1 [==============================] - 1s 642ms/step\n",
      "1/1 [==============================] - 1s 602ms/step\n",
      "1/1 [==============================] - 1s 655ms/step\n",
      "1/1 [==============================] - 1s 658ms/step\n",
      "1/1 [==============================] - 1s 582ms/step\n",
      "1/1 [==============================] - 1s 583ms/step\n",
      "1/1 [==============================] - 1s 582ms/step\n",
      "1/1 [==============================] - 1s 591ms/step\n",
      "1/1 [==============================] - 1s 583ms/step\n",
      "1/1 [==============================] - 1s 568ms/step\n",
      "1/1 [==============================] - 1s 577ms/step\n",
      "1/1 [==============================] - 1s 580ms/step\n",
      "1/1 [==============================] - 1s 574ms/step\n",
      "1/1 [==============================] - 1s 583ms/step\n",
      "1/1 [==============================] - 1s 705ms/step\n",
      "1/1 [==============================] - 1s 811ms/step\n",
      "1/1 [==============================] - 1s 707ms/step\n",
      "1/1 [==============================] - 1s 617ms/step\n",
      "1/1 [==============================] - 1s 630ms/step\n",
      "1/1 [==============================] - 1s 670ms/step\n",
      "1/1 [==============================] - 1s 674ms/step\n",
      "1/1 [==============================] - 1s 779ms/step\n",
      "1/1 [==============================] - 1s 702ms/step\n",
      "1/1 [==============================] - 1s 670ms/step\n",
      "1/1 [==============================] - 1s 568ms/step\n",
      "1/1 [==============================] - 1s 660ms/step\n",
      "1/1 [==============================] - 1s 583ms/step\n",
      "1/1 [==============================] - 1s 672ms/step\n",
      "1/1 [==============================] - 1s 762ms/step\n",
      "1/1 [==============================] - 1s 685ms/step\n",
      "1/1 [==============================] - 1s 575ms/step\n",
      "1/1 [==============================] - 1s 572ms/step\n",
      "1/1 [==============================] - 1s 581ms/step\n",
      "1/1 [==============================] - 1s 562ms/step\n",
      "1/1 [==============================] - 1s 589ms/step\n",
      "1/1 [==============================] - 1s 609ms/step\n",
      "1/1 [==============================] - 1s 639ms/step\n",
      "1/1 [==============================] - 1s 704ms/step\n",
      "1/1 [==============================] - 1s 649ms/step\n",
      "1/1 [==============================] - 1s 785ms/step\n",
      "1/1 [==============================] - 1s 716ms/step\n",
      "Found 280 images belonging to 9 classes.\n",
      "1/1 [==============================] - 1s 671ms/step\n",
      "1/1 [==============================] - 1s 659ms/step\n",
      "1/1 [==============================] - 1s 674ms/step\n",
      "1/1 [==============================] - 1s 635ms/step\n",
      "1/1 [==============================] - 1s 645ms/step\n",
      "1/1 [==============================] - 1s 713ms/step\n",
      "1/1 [==============================] - 1s 643ms/step\n",
      "1/1 [==============================] - 1s 638ms/step\n",
      "1/1 [==============================] - 1s 702ms/step\n",
      "1/1 [==============================] - 1s 754ms/step\n",
      "1/1 [==============================] - 1s 636ms/step\n",
      "1/1 [==============================] - 1s 789ms/step\n",
      "1/1 [==============================] - 1s 680ms/step\n",
      "1/1 [==============================] - 1s 643ms/step\n",
      "Found 262 images belonging to 9 classes.\n",
      "1/1 [==============================] - 1s 724ms/step\n",
      "1/1 [==============================] - 1s 786ms/step\n",
      "1/1 [==============================] - 1s 789ms/step\n",
      "1/1 [==============================] - 1s 636ms/step\n",
      "1/1 [==============================] - 1s 640ms/step\n",
      "1/1 [==============================] - 1s 751ms/step\n",
      "1/1 [==============================] - 1s 849ms/step\n",
      "1/1 [==============================] - 1s 691ms/step\n",
      "1/1 [==============================] - 1s 864ms/step\n",
      "1/1 [==============================] - 1s 801ms/step\n",
      "1/1 [==============================] - 1s 825ms/step\n",
      "1/1 [==============================] - 1s 881ms/step\n",
      "1/1 [==============================] - 1s 802ms/step\n",
      "1/1 [==============================] - 0s 96ms/step\n"
     ]
    }
   ],
   "source": [
    "train_features, train_labels = extract_features(train_dir, 900)\n",
    "validation_features, validation_labels = extract_features(validation_dir, 280)\n",
    "test_features, test_labels = extract_features(test_dir, 262)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "13564bf6",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_29\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " dense_37 (Dense)            (None, 256)               2097408   \n",
      "                                                                 \n",
      " dropout_16 (Dropout)        (None, 256)               0         \n",
      "                                                                 \n",
      " dense_38 (Dense)            (None, 9)                 2313      \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 2,099,721\n",
      "Trainable params: 2,099,721\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "Epoch 1/30\n",
      "45/45 [==============================] - 1s 9ms/step - loss: 1.5542 - acc: 0.5422 - val_loss: 1.1173 - val_acc: 0.6357\n",
      "Epoch 2/30\n",
      "45/45 [==============================] - 0s 7ms/step - loss: 0.8929 - acc: 0.7167 - val_loss: 1.1746 - val_acc: 0.6357\n",
      "Epoch 3/30\n",
      "45/45 [==============================] - 0s 7ms/step - loss: 0.6744 - acc: 0.7844 - val_loss: 1.0907 - val_acc: 0.6929\n",
      "Epoch 4/30\n",
      "45/45 [==============================] - 0s 7ms/step - loss: 0.5023 - acc: 0.8289 - val_loss: 1.0406 - val_acc: 0.7250\n",
      "Epoch 5/30\n",
      "45/45 [==============================] - 0s 7ms/step - loss: 0.4146 - acc: 0.8600 - val_loss: 1.1120 - val_acc: 0.7000\n",
      "Epoch 6/30\n",
      "45/45 [==============================] - 0s 7ms/step - loss: 0.3549 - acc: 0.8822 - val_loss: 1.0660 - val_acc: 0.7179\n",
      "Epoch 7/30\n",
      "45/45 [==============================] - 0s 7ms/step - loss: 0.2415 - acc: 0.9311 - val_loss: 1.0722 - val_acc: 0.7393\n",
      "Epoch 8/30\n",
      "45/45 [==============================] - 0s 7ms/step - loss: 0.2135 - acc: 0.9356 - val_loss: 1.2917 - val_acc: 0.7107\n",
      "Epoch 9/30\n",
      "45/45 [==============================] - 0s 7ms/step - loss: 0.1656 - acc: 0.9511 - val_loss: 1.1562 - val_acc: 0.7071\n",
      "Epoch 10/30\n",
      "45/45 [==============================] - 0s 7ms/step - loss: 0.1580 - acc: 0.9589 - val_loss: 1.1989 - val_acc: 0.7250\n",
      "Epoch 11/30\n",
      "45/45 [==============================] - 0s 7ms/step - loss: 0.1301 - acc: 0.9589 - val_loss: 1.3325 - val_acc: 0.7036\n",
      "Epoch 12/30\n",
      "45/45 [==============================] - 0s 7ms/step - loss: 0.1061 - acc: 0.9656 - val_loss: 1.2597 - val_acc: 0.7179\n",
      "Epoch 13/30\n",
      "45/45 [==============================] - 0s 7ms/step - loss: 0.1007 - acc: 0.9744 - val_loss: 1.3490 - val_acc: 0.7143\n",
      "Epoch 14/30\n",
      "45/45 [==============================] - 0s 7ms/step - loss: 0.1107 - acc: 0.9711 - val_loss: 1.4403 - val_acc: 0.6893\n",
      "Epoch 15/30\n",
      "45/45 [==============================] - 0s 7ms/step - loss: 0.1170 - acc: 0.9622 - val_loss: 1.3724 - val_acc: 0.7321\n",
      "Epoch 16/30\n",
      "45/45 [==============================] - 0s 7ms/step - loss: 0.0753 - acc: 0.9767 - val_loss: 1.3735 - val_acc: 0.7107\n",
      "Epoch 17/30\n",
      "45/45 [==============================] - 0s 7ms/step - loss: 0.0908 - acc: 0.9678 - val_loss: 1.3552 - val_acc: 0.7286\n",
      "Epoch 18/30\n",
      "45/45 [==============================] - 0s 8ms/step - loss: 0.0699 - acc: 0.9789 - val_loss: 1.4099 - val_acc: 0.7214\n",
      "Epoch 19/30\n",
      "45/45 [==============================] - 0s 7ms/step - loss: 0.0527 - acc: 0.9856 - val_loss: 1.3858 - val_acc: 0.7143\n",
      "Epoch 20/30\n",
      "45/45 [==============================] - 0s 7ms/step - loss: 0.0607 - acc: 0.9789 - val_loss: 1.5715 - val_acc: 0.7071\n",
      "Epoch 21/30\n",
      "45/45 [==============================] - 0s 7ms/step - loss: 0.0521 - acc: 0.9833 - val_loss: 1.5219 - val_acc: 0.7250\n",
      "Epoch 22/30\n",
      "45/45 [==============================] - 0s 7ms/step - loss: 0.0496 - acc: 0.9856 - val_loss: 1.5431 - val_acc: 0.7143\n",
      "Epoch 23/30\n",
      "45/45 [==============================] - 0s 7ms/step - loss: 0.0371 - acc: 0.9900 - val_loss: 1.5361 - val_acc: 0.7179\n",
      "Epoch 24/30\n",
      "45/45 [==============================] - 0s 8ms/step - loss: 0.0434 - acc: 0.9889 - val_loss: 1.5660 - val_acc: 0.7286\n",
      "Epoch 25/30\n",
      "45/45 [==============================] - 0s 7ms/step - loss: 0.0491 - acc: 0.9867 - val_loss: 1.5154 - val_acc: 0.7107\n",
      "Epoch 26/30\n",
      "45/45 [==============================] - 0s 7ms/step - loss: 0.0397 - acc: 0.9933 - val_loss: 1.6062 - val_acc: 0.6964\n",
      "Epoch 27/30\n",
      "45/45 [==============================] - 0s 7ms/step - loss: 0.0483 - acc: 0.9867 - val_loss: 1.6511 - val_acc: 0.7179\n",
      "Epoch 28/30\n",
      "45/45 [==============================] - 0s 7ms/step - loss: 0.0468 - acc: 0.9878 - val_loss: 1.9111 - val_acc: 0.6929\n",
      "Epoch 29/30\n",
      "45/45 [==============================] - 0s 7ms/step - loss: 0.0485 - acc: 0.9833 - val_loss: 1.6104 - val_acc: 0.7321\n",
      "Epoch 30/30\n",
      "45/45 [==============================] - 0s 7ms/step - loss: 0.0422 - acc: 0.9911 - val_loss: 1.4669 - val_acc: 0.7357\n"
     ]
    }
   ],
   "source": [
    "train_features = np.reshape(train_features, (900, 4*4* 512))\n",
    "validation_features = np.reshape(validation_features, (280, 4*4* 512))\n",
    "test_features = np.reshape(test_features, (262, 4*4* 512))\n",
    "\n",
    "from keras import models\n",
    "from keras import layers\n",
    "from keras import optimizers\n",
    "\n",
    "model = models.Sequential()\n",
    "model.add(layers.Dense(256, activation='relu', input_dim=4 * 4 * 512))\n",
    "model.add(layers.Dropout(0.5))\n",
    "model.add(layers.Dense(9, activation='softmax'))\n",
    "\n",
    "\n",
    "model.compile(loss='categorical_crossentropy',\n",
    "              optimizer=optimizers.Adam(learning_rate=0.001),\n",
    "              metrics=['acc'])\n",
    "\n",
    "model.summary()\n",
    "history = model.fit(train_features, train_labels,\n",
    "                    epochs=30,\n",
    "                    batch_size=20,\n",
    "                    validation_data=(validation_features, validation_labels))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "ef40e0e2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "acc = history.history['acc']\n",
    "val_acc = history.history['val_acc']\n",
    "loss = history.history['loss']\n",
    "val_loss = history.history['val_loss']\n",
    "epochs = range(1, len(acc) + 1)\n",
    "plt.plot(epochs, acc, 'bo', label='Training acc')\n",
    "plt.plot(epochs, val_acc, 'b', label='Validation acc')\n",
    "plt.title('Training and validation accuracy')\n",
    "plt.legend()\n",
    "plt.figure()\n",
    "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
    "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
    "plt.title('Training and validation loss')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "9445aa16",
   "metadata": {},
   "outputs": [],
   "source": [
    "#CONVBASE Dondurmak için\n",
    "\n",
    "conv_base.trainable = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "af525c7b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 900 images belonging to 9 classes.\n",
      "Found 280 images belonging to 9 classes.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\ALPEREN\\AppData\\Local\\Temp\\ipykernel_16724\\895805187.py:23: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n",
      "  history = model.fit_generator(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "WARNING:tensorflow:Model was constructed with shape (None, 8192) for input KerasTensor(type_spec=TensorSpec(shape=(None, 8192), dtype=tf.float32, name='dense_37_input'), name='dense_37_input', description=\"created by layer 'dense_37_input'\"), but it was called on an input with incompatible shape (None, None, None, None).\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "in user code:\n\n    File \"C:\\Users\\ALPEREN\\anaconda3\\lib\\site-packages\\keras\\engine\\training.py\", line 1249, in train_function  *\n        return step_function(self, iterator)\n    File \"C:\\Users\\ALPEREN\\anaconda3\\lib\\site-packages\\keras\\engine\\training.py\", line 1233, in step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"C:\\Users\\ALPEREN\\anaconda3\\lib\\site-packages\\keras\\engine\\training.py\", line 1222, in run_step  **\n        outputs = model.train_step(data)\n    File \"C:\\Users\\ALPEREN\\anaconda3\\lib\\site-packages\\keras\\engine\\training.py\", line 1024, in train_step\n        loss = self.compute_loss(x, y, y_pred, sample_weight)\n    File \"C:\\Users\\ALPEREN\\anaconda3\\lib\\site-packages\\keras\\engine\\training.py\", line 1082, in compute_loss\n        return self.compiled_loss(\n    File \"C:\\Users\\ALPEREN\\anaconda3\\lib\\site-packages\\keras\\engine\\compile_utils.py\", line 265, in __call__\n        loss_value = loss_obj(y_t, y_p, sample_weight=sw)\n    File \"C:\\Users\\ALPEREN\\anaconda3\\lib\\site-packages\\keras\\losses.py\", line 152, in __call__\n        losses = call_fn(y_true, y_pred)\n    File \"C:\\Users\\ALPEREN\\anaconda3\\lib\\site-packages\\keras\\losses.py\", line 284, in call  **\n        return ag_fn(y_true, y_pred, **self._fn_kwargs)\n    File \"C:\\Users\\ALPEREN\\anaconda3\\lib\\site-packages\\keras\\losses.py\", line 2004, in categorical_crossentropy\n        return backend.categorical_crossentropy(\n    File \"C:\\Users\\ALPEREN\\anaconda3\\lib\\site-packages\\keras\\backend.py\", line 5532, in categorical_crossentropy\n        target.shape.assert_is_compatible_with(output.shape)\n\n    ValueError: Shapes (None, None) and (None, None, None, 9) are incompatible\n",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_16724\\895805187.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     21\u001b[0m               metrics=['acc'])\n\u001b[0;32m     22\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 23\u001b[1;33m history = model.fit_generator(\n\u001b[0m\u001b[0;32m     24\u001b[0m           \u001b[0mtrain_generator\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     25\u001b[0m           \u001b[0msteps_per_epoch\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m20\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\keras\\engine\\training.py\u001b[0m in \u001b[0;36mfit_generator\u001b[1;34m(self, generator, steps_per_epoch, epochs, verbose, callbacks, validation_data, validation_steps, validation_freq, class_weight, max_queue_size, workers, use_multiprocessing, shuffle, initial_epoch)\u001b[0m\n\u001b[0;32m   2602\u001b[0m             \u001b[0mstacklevel\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2603\u001b[0m         )\n\u001b[1;32m-> 2604\u001b[1;33m         return self.fit(\n\u001b[0m\u001b[0;32m   2605\u001b[0m             \u001b[0mgenerator\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2606\u001b[0m             \u001b[0msteps_per_epoch\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0msteps_per_epoch\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\keras\\utils\\traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m     68\u001b[0m             \u001b[1;31m# To get the full stack trace, call:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     69\u001b[0m             \u001b[1;31m# `tf.debugging.disable_traceback_filtering()`\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 70\u001b[1;33m             \u001b[1;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     71\u001b[0m         \u001b[1;32mfinally\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     72\u001b[0m             \u001b[1;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\keras\\engine\\training.py\u001b[0m in \u001b[0;36mtf__train_function\u001b[1;34m(iterator)\u001b[0m\n\u001b[0;32m     13\u001b[0m                 \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     14\u001b[0m                     \u001b[0mdo_return\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 15\u001b[1;33m                     \u001b[0mretval_\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mag__\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mconverted_call\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mld\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mstep_function\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mld\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mag__\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mld\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfscope\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     16\u001b[0m                 \u001b[1;32mexcept\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     17\u001b[0m                     \u001b[0mdo_return\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mFalse\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: in user code:\n\n    File \"C:\\Users\\ALPEREN\\anaconda3\\lib\\site-packages\\keras\\engine\\training.py\", line 1249, in train_function  *\n        return step_function(self, iterator)\n    File \"C:\\Users\\ALPEREN\\anaconda3\\lib\\site-packages\\keras\\engine\\training.py\", line 1233, in step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"C:\\Users\\ALPEREN\\anaconda3\\lib\\site-packages\\keras\\engine\\training.py\", line 1222, in run_step  **\n        outputs = model.train_step(data)\n    File \"C:\\Users\\ALPEREN\\anaconda3\\lib\\site-packages\\keras\\engine\\training.py\", line 1024, in train_step\n        loss = self.compute_loss(x, y, y_pred, sample_weight)\n    File \"C:\\Users\\ALPEREN\\anaconda3\\lib\\site-packages\\keras\\engine\\training.py\", line 1082, in compute_loss\n        return self.compiled_loss(\n    File \"C:\\Users\\ALPEREN\\anaconda3\\lib\\site-packages\\keras\\engine\\compile_utils.py\", line 265, in __call__\n        loss_value = loss_obj(y_t, y_p, sample_weight=sw)\n    File \"C:\\Users\\ALPEREN\\anaconda3\\lib\\site-packages\\keras\\losses.py\", line 152, in __call__\n        losses = call_fn(y_true, y_pred)\n    File \"C:\\Users\\ALPEREN\\anaconda3\\lib\\site-packages\\keras\\losses.py\", line 284, in call  **\n        return ag_fn(y_true, y_pred, **self._fn_kwargs)\n    File \"C:\\Users\\ALPEREN\\anaconda3\\lib\\site-packages\\keras\\losses.py\", line 2004, in categorical_crossentropy\n        return backend.categorical_crossentropy(\n    File \"C:\\Users\\ALPEREN\\anaconda3\\lib\\site-packages\\keras\\backend.py\", line 5532, in categorical_crossentropy\n        target.shape.assert_is_compatible_with(output.shape)\n\n    ValueError: Shapes (None, None) and (None, None, None, 9) are incompatible\n"
     ]
    }
   ],
   "source": [
    "from keras.preprocessing.image import ImageDataGenerator\n",
    "from keras import optimizers\n",
    "\n",
    "train_datagen = ImageDataGenerator(\n",
    "                rescale=1./255,\n",
    "                rotation_range=40,\n",
    "                width_shift_range=0.2,\n",
    "                height_shift_range=0.2,\n",
    "                shear_range=0.2,\n",
    "                zoom_range=0.2,\n",
    "                horizontal_flip=True,\n",
    "                fill_mode='nearest')\n",
    "\n",
    "test_datagen = ImageDataGenerator(rescale=1./255)\n",
    "train_generator = train_datagen.flow_from_directory(\n",
    "                  train_dir,\n",
    "                  target_size=(150, 150),\n",
    "                  batch_size=20,\n",
    "                  class_mode='categorical')\n",
    "\n",
    "validation_generator = test_datagen.flow_from_directory(\n",
    "                      validation_dir,\n",
    "                      target_size=(150, 150),\n",
    "                      batch_size=20,\n",
    "                      class_mode='categorical')\n",
    "\n",
    "model.compile(loss='categorical_crossentropy',\n",
    "              optimizer=optimizers.Adam(learning_rate=0.001),\n",
    "              metrics=['acc'])\n",
    "\n",
    "history = model.fit_generator(\n",
    "          train_generator,\n",
    "          steps_per_epoch=20,\n",
    "          epochs=30,\n",
    "          validation_data=validation_generator,\n",
    "          validation_steps=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "58d457e7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
